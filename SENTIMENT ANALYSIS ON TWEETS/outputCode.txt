library(shiny)
library(dplyr)
library(stringr)
library(text)
library(readr)
library(purrr)
library(tidyr)
library(caret)

tsa <- readRDS("tsa.rds")
model <- tsa$model
bow_vectorizer <- tsa$bow_vectorizer

ui <- fluidPage(
  textInput("input_tweet", "Enter the tweet here"),
  textOutput("result")
)

server <- function(input, output) {
  remove_pattern <- function(input_txt, pattern) {
    r <- str_extract_all(input_txt, pattern)[[1]]
    for (word in r) {
      input_txt <- str_replace_all(input_txt, word, "")
    }
    return(input_txt)
  }
  
  observeEvent(input$input_tweet, {
    df <- data.frame(tweet = input$input_tweet, stringsAsFactors = FALSE)
    df$clean_tweet <- map_chr(df$tweet, ~ remove_pattern(.x, "@[\\w]*"))
    df$clean_tweet <- str_replace_all(df$clean_tweet, "[^a-zA-Z#]", " ")
    df$clean_tweet <- map_chr(df$clean_tweet, ~ paste(Filter(function(w) nchar(w) > 3, str_split(.x, " ")[[1]]), collapse = " "))
    
    tokenized_tweet <- map(df$clean_tweet, ~ str_split(.x, " ")[[1]])
    stemmer <- text::textstem()
    tokenized_tweet <- map(tokenized_tweet, ~ map_chr(.x, ~ text::stem_word(.x, stemmer)))
    
    for (i in seq_along(tokenized_tweet)) {
      tokenized_tweet[[i]] <- paste(tokenized_tweet[[i]], collapse = " ")
    }
    
    df$clean_tweet <- tokenized_tweet
    bow <- predict(bow_vectorizer, df$clean_tweet)
    pred <- predict(model, bow)
    
    output$result <- renderText({
      if (pred == 1) {
        "Positive Tweet"
      } else if (pred == 0) {
        "Neutral Tweet"
      } else if (pred == -1) {
        "Negative Tweet"
      }
    })
  })
}

shinyApp(ui = ui, server = server)

